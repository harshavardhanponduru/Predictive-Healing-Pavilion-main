import numpy as npimport pandas as pdfrom sklearn.ensemble import RandomForestClassifierfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import accuracy_scoreimport joblibimport osmodel_path = "/Users/harsha/Predictive-Healing-Pavilion/api/models/risk_model.pkl"# --- Mock data for training (heart rate, blood pressure, risk level) ---data = {    "heart_rate": [90, 110, 120, 140, 80, 95, 130, 150, 70, 100, 125, 145],    "blood_pressure": [120, 130, 140, 160, 110, 115, 145, 170, 100, 125, 150, 180],    "risk": [0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1]}# --- Create DataFrame ---df = pd.DataFrame(data)# --- Split data into features and target ---X = df[["heart_rate", "blood_pressure"]]y = df["risk"]# --- Split the data into training and test sets ---X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)try:    # --- Check if model already exists ---    if os.path.exists(model_path):        print("✅ Model already trained. Loading existing model...")        model = joblib.load(model_path)    else:        # --- Initialize and train the model ---        model = RandomForestClassifier(n_estimators=100, random_state=42)        model.fit(X_train, y_train)        # --- Evaluate the model for accuracy (optional) ---        y_pred = model.predict(X_test)        accuracy = accuracy_score(y_test, y_pred)        print(f"✅ Model Accuracy: {accuracy * 100:.2f}%")        # --- Save the trained model to a file ---        joblib.dump(model, model_path)        print(f"✅ Model trained and saved successfully at: {model_path}")except Exception as e:    print(f"❌ Error while training or saving the model: {e}")